Assignment 1 of CS330 by Group 37

Group Members -
(1) Drishti Wali - 13266
(2) Kriti Joshi - 13358
(3) M.Arunothia - 13378

The following syscalls were implemented in NachOS environment as a part of the assignment.

The implementation code of each syscall was written in exception.cc under the appropriate syscall-exception and syscall-type.

(1) system_GetReg()

The input argument is read from the register number 4. This gives us the register number whose contents are to be returned.
The contents of the given register is read using the Read() function defined under the machine class. 
The contents are written to the register number 2 using the Write() function defined under the machine class.
The program counter is moved forward to the next instruction.

(2) system_GetPA()
 
The input argument is read from the register number 4. This gives us the virtual address whose physical address is to be returned.
vpn = virtual page number = (virtual address / PageSize ) was estimated.
The three failure cases as mentioned in the syscall description were checked for.
The physical address was obtained by the mapping available under 'PageTable' defined under machine.h, very similar to that done in Translate() function in translate.cc. The program counter is moved forward to the next instruction.

(3) system_GetPID()

A global variable named processID is initialised to 0. Every newly created process is assigned a unique PID by using this processID. This assigning is done in the name argument constructor of the NachOSThread class. ProcessID is updated by incrementing it with every new process creation. As the 'pid' data member of NachOSThread class is private, we define and use a member function getPID(). The currentThread->getPID() value is written to register number 2 and the program counter is moved forward to the next instruction.

(4) syscall_Time()

Total ticks are found using the Statistics object pointer *stats that is defined in system.cc. stats->totalTicks is written to register number 2 and the program counter is moved forward to the next instruction.

(5) syscall_GetPPID()

In the functions ThreadFork(), syscall_Fork() and syscall_Exec(), the newly created process's ppid is assigned to be the calling process's pid. As the 'ppid' data member of NachOSThread class is private, we define and use a member function getPPID(). The currentThread->getPPID() value is written to register number 2 and the program counter is moved forward to the next instruction.

(6) syscall_Sleep()

We maintain a global List named 'mySleepList' that keeps track of all the currently sleeping processes.  
The input argument is read from the register number 4. This gives us the number of ticks for which the process is to sleep. 
If number of ticks == 0, we just call currentThread->YieldCPU().
Otherwise, we estimate wakeTime( = number of ticks + stats->totalTicks) of the process. We do a sortedInsert of a new ListElement(currentThread, wakeTime) into mySleepList. In the TimerInterruptHandler() we move all those processes whose (wakeTime <= stats->totalTick) to the ready queue using ReadyToRun() function and delete these from mySleepList. 
The program counter is moved forward to the next instruction.

(7) syscall_Yield()

currentThread->YieldCPU() is called and the program counter is moved forward to the next instruction.

(8) syscall_NumInstr()

A new public data member 'numInstructions' is added to the class NachOSThread. 'numInstructions' is initialised to zero in the name argument constructor of the NachOSThread class. currentThread->numInstructions is incremented in the function OneInstruction(), to keep track of the instruction count of the currentThread. The currentThread->numInstructions value is written to register number 2 and the program counter is moved forward to the next instruction.

(9) syscall_Exec()

The syscall calls the StartProcess declared in progtest.c. The addrspace constructor was modified to allow accurate mapping of the virtual page of the pageTable to the corresponding new unallocated page in the MainMemory. This was implemented using a global variable MainMemoryPage which is incremented whenever a virtual page points to the same. The corresponding initial mainMemory address in functions bzero and corresponding physical address corresponding to the virtual address in executable->ReadAt. Thus, the new thread would have space not overwritten on old.

(10) syscall_Fork()
The memory from the calling process is copied to the next available memory in MainMemory as decribed in assignment1.txt. The registers of the forked process are correctly assigned, (register 2 gets 0 for the child, child-PID for the parent and the PrevPC, PC and NextPC are incremented as always). A new addrspace is allocated similar to the exec call where the physical page in the child page table is shifted from the parent pageTable physical page by the number of pages in the parent. A stack is allocated for the kernel mode using ThreadStackAllocate which calls the function fkernel which deletes if any thread had to be deleted and then runs the thread. This thread is added to the children of this thread and the new thread is scheduled to run.  

(11) syscall_Join()

PassedID is read from the register number 4. We traverse the data member 'children' of the currentThread to find out whether the passedID is a valid child pid. We also check what is the exit code of that corresponding child. 
If the passedID was invalid, we write -1 to the register number 2 and return by moving forward the program counter. 
If the exitCodeChild is 0 then it means the child has already exited and hence, we write 0 to the register number 2 and return by moving forward the program counter.
If the exitCodeChild is -1, we put the parent to sleep as now it has to wait for the child to exit. Here, the program counter is not incremented. So whenever the parent is woken up, it will again do a system_Join to check for the exitCodeChild of that particular child.

(12) syscall_Exit()

First we check whether the parent of the exit calling process (other than process main) is sleeping due to Join for any child. If yes then we wake up the parent by moving it to the ready queue. All children of an exiting process is made to have a ppid = -1 and its parent pointer pointing to NULL. We call FinishThread() on the current thread. We maintain a global variable liveThreads that keeps track of the number of threads currently live on the system. If this number is non-zero then the current thread that is to be deleted (put to sleep by FinishThread()) will actually get deleted by the next remaining live threads. If liveThreads == 0, this thread being the last should be deleted somehow. This is done by calling interrupt->Halt() in FinishThread(), which inturn calls the Cleanup() function for this final cleaning.







